ðŸ”¹ How Java Code Actually Runs

1. Writing Source Code
    You write code in .java files.
    Closer to human logic.

2. Compilation (JDK â†’ javac)
    .java to Bytecode  (.java â†’ .class (Bytecode)).
    Bytecode = Intermediate language, not machine-specific.
3. JVM Starts 
    JVM loads bytecode into memory.
    Class Loader brings in your class + library classes.
    Bytecode Verifier checks for security
4. Execution in JVM
    Interpreter: Reads bytecode â†’ converts line-by-line into native(system specific code based on hardware and os)instructions.
    JIT Compiler: Frequently used code (hotspot) is compiled into native machine code and cached.
5. Hardware Execution


ðŸ”¹ What is Native Code?
    Machine code that a specific CPU + OS can directly execute.
    Itâ€™s hardware-specific.


ðŸ”¹ In Java Context.
    Java source â†’ compiled into bytecode (not native).
    JVM â†’ converts bytecode into native code at runtime (via interpreter or JIT).

âš¡ Shortcut Memory:
ðŸ‘‰ Bytecode = JVM language, Native Code = CPU language.

Source Code â†’ Bytecode â†’ Native/Machine Code â†’ CPU executes
